"""The matrix_mul doctest"""


Importing the function
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

simple test case
>>> matrix_mul([[1, 2], [3, 4]], [[5, 6], [7, 8]])
[[19, 22], [43, 50]]

Empty matrix
>>> matrix_mul([[]], [[1, 3]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

Non-Integers
>>> matrix_mul([[1, 2], ['3', 4]], [[5, 6], [7, 8]])
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

Non_integers
>>> matrix_mul([[5, 6], [7, 8]], [['34', 5], [10, 11.2]])
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

Different size matrix
>>> matrix_mul([[45, 2.4]], [[6.7, 5.3, 3]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

Incompatible Matrix Dimensions
>>> matrix_mul([[16, 19], [10.6, 11.9]], [[22.8, 3]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied

Multiplying two matrices
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

multiplying matrix with negative value
>>> my_list1 = [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
>>> my_list2 = [[1, -1, 2], [2, -1, 2], [3, -3, 0]]
>>> matrix_mul(my_list1, my_list2)
[[30, -26, 10], [36, -31, 14], [42, -36, 18]]

Passing None as a matrix
>>> matrix_mul([[7, 12]], None)
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

Passing a tuple as a matrix
>>> matrix_mul((7, 18, 1.1), [[18], [7.9], [15.9]])
Traceback (most recent call last):
...
TypeError: m_a must be a list

Passing a list of tuples
>>> matrix_mul([(1, 5, 10)], [(1), (5)])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

Missing one argument
>>> matrix_mul([[1, 2]])
Traceback (most recent call last):
    ...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'
